vi /etc/security/limits.d/90-nproc.conf
show dbs; //查看所有（数据库）
show collections;  //查看所有文档集合（数据表）
建库

MongoDB use DB_NAME用于创建数据库。该命令将创建一个新的数据库，如果它不存在，否则将返回现有的数据库。
db.test.insert({name:"niclas"}) 插入数据  数据库才会存在 否则数据库创建了 也不会存在

db  查看当前所在数据库

db.dropDatabase()  删除数据库 //需要切换到该数据库下操作

db.COLLECTION_NAME.insert(document) //给该库下的集合插入文档 ，如果该集合不在该数据库中， MongoDB 会自动创建该集合比插入文档。

db.mytable.find();  //查看集合中的文档  mytable为集合名

document=({name:"jim"}); //可以定义为一个变量 然后插入 db.mytable.insert(document);

插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。


/** 更新文档 **/

1:  db.mytable.update(query,update,upsert,multi,writeConcern); 

example:  db.mytable.update({"name":"mingyu"},{$set:{"name":"lifeng"}});

query : update的查询条件，类似sql update查询内where后面的。
update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
writeConcern :可选，抛出异常的级别。

2:  db.mytable.save(document,writeConcern);

document : 文档数据。
writeConcern :可选，抛出异常的级别。

/** 更新文档 end**/


/** 删除文档 **/

query :（可选）删除的文档的条件。
justOne : （可选）如果设为 true 或 1，则只删除一个文档。
writeConcern :（可选）抛出异常的级别。

删除所有数据 db.col.remove({});

/** 删除文档 end**/


/** 文档查询 **/
db.col.find(条件,要查找的列名);  //都是可选参数
example : db.col.find({},{"title":1,_id:0})  //查询title列 _id 列默认为1 要设成成0才不显示
example : db.col.find({name:"lifeng"});  //查询name=lifeng的记录
          db.col.find({"likes":{$lt:50}}).pretty() // 小于条件
          db.col.find({"likes":{$lte:50}}).pretty() //小于等于
          db.col.find({"likes":{$gt:50}}).pretty() //大于
          db.col.find({"likes":{$gte:50}}).pretty() //大于等于
          db.col.find({"likes":{$ne:50}}).pretty() //不等于
          db.col.find({key1:value1, key2:value2}).pretty()  //and条件
          db.col.find({$or:[{"by":"val"},{"title": "MongoDB"}]}).pretty()  //or条件

db.col.find().pretty()  //如果你需要以易读的方式来读取数据，可以使用 pretty()

还有一个 findOne() 方法  //只返回一条数据




/** $type **/

Double	1
String	2
Object	3
Array	4
Binary data	5
Undefined	6	已废弃。
Object id	7
Boolean	8
Date	9
Null	10
Regular Expression	11
JavaScript	13
Symbol	14
JavaScript (with scope)	15
32-bit integer	16
Timestamp	17
64-bit integer	18
Min key	255	Query with -1.
Max key	127
example query:  db.mytable.find({name:{$type:2}});
/** $type end**/


db.mytable.find().limit(num)  //limit方法  num为数字  取多少条之意

db.mytable.find().limit(num).skip(num); //skip方法  跳过多少条取多少条 skip 默认参数是0

db.mytable.find({},{_id:0,name:1}).sort({age:-1})  // 按照age降序排列查找 name列
/** 文档查询 e**/


/** 索引 start**/

db.COLLECTION_NAME.ensureIndex({KEY:1})  //索引创建 语法中 Key 值为你要创建的索引字段，1为指定按升序创建索引，如果你想按降序来创建索引指定为-1即可。
ensureIndex方法可以接受的可选参数

background	Boolean	建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 "background" 可选参数。 "background" 默认值为false。
unique	Boolean	建立的索引是否唯一。指定为true创建唯一索引。默认值为false.
name	string	索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。
dropDups	Boolean	在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.
sparse	Boolean	对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.
expireAfterSeconds	integer	指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。
v	index version	索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。
weights	document	索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。
default_language	string	对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语
language_override	string	对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.


db.collectionName.getIndexes()  //查看集合下所有索引

***  文本索引  db.comments.ensureIndex({"mem":"text"})
***  哈希索引  db.abc.ensureIndex({"a":"hashed"})
***  TTL索引   db.comments.ensureIndex({"ts":1},{expireAfterSeconds:60})  #创建TTL索引，过期时间60秒，即60秒时间生成的数据会被删除。 |

db.collection.dropIndex(indexName);  // 删除索引 指定索引名

查询强制使用索引  db.abc.find({"c":1,"b":2}).hint("b_1")  #hint里面是"索引字段"或则"索引名"

db.abc.reIndex()  //索引出现损坏需要重建

/** 索引 end**/



/** 聚合方法 **/
db.mytable.aggregate({$group: {_id:"$age",tatal_person:{$sum: 1}}})   //以age分组查询 统计每个组的age的和


$sum	计算总和。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
$avg	计算平均值	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
$min	获取集合中所有文档对应值得最小值。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
$max	获取集合中所有文档对应值得最大值。	db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
$push	在结果文档中插入值到一个数组中。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
$addToSet	在结果文档中插入值到一个数组中，但不创建副本。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
$first	根据资源文档的排序获取第一个文档数据。	db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
$last	根据资源文档的排序获取最后一个文档数据	db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])

***管道操作

$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
$limit：用来限制MongoDB聚合管道返回的文档数。
$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。
$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
$group：将集合中的文档分组，可用于统计结果。
$sort：将输入文档排序后输出。
$geoNear：输出接近某一地理位置的有序文档。

example： db.mytable.aggregate([{$project: {name:1,kecheng:1,_id:0,age:1}},{$sort:{age:1}}]) // 多重操作嵌套
          db.mytable.aggregate([{$project: {name:1,kecheng:1,_id:0,age:1}},{$sort: {age:-1}},{$skip: 2}])

/** 聚合方法 end**/

/** 副本集 **/

特征：
12个节点的集群 （最大）
任何节点可作为主节点
所有写入操作都在主节点上
自动故障转移
自动恢复

设置启动配置 mongod --port "PORT" --dbpath "YOUR_DB_DATA_PATH" --replSet "REPLICA_SET_INSTANCE_NAME"
客户端进入 rs.initiate();  //启动副本集
我们可以使用rs.conf()来查看副本集的配置
查看副本集姿态使用 rs.status() 命令
rs.add("ip:port");  //添加一个副本  MongoDB中你只能通过主节点将Mongo服务添加到副本集中，
db.isMaster()  //判断当前运行的Mongo服务是否为主节点可以使用命令

*** 高可用  主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。
*** 主节点竞选 选举还有个前提条件，参与选举的节点数量必须大于副本集总节点数量的一半，如果已经小于一半了所有节点保持只读状态。

/** 副本集 end**/


/** 分片 **/

应用场景 ： 在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。
当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得 数据库系统能存储和处理更多的数据。
使用分片的理由：
复制所有的写入操作到主节点
延迟的敏感数据会在主节点查询
单个副本集限制在12个节点
当请求量巨大时会出现内存不足。
本地磁盘不足
垂直扩展价格昂贵
-----------------------------
配置三台mongod分片 一台config_server  一台route_server
/** shard **/
192.168.61.97:27020
192.168.61.97:27021
192.168.61.97:27022

/** route **/
192.168.61.97:27023


/** config **/
192.168.61.97:27024


客户端是直接跟route通信的  route 经过配置服务器的算法 将请求分发给shard

启动shard
/data/mongodb/shard/s1/bin/mongod -f /data/mongodb/shard/s1/conf/mongod.conf --logappend
/data/mongodb/shard/s2/bin/mongod -f /data/mongodb/shard/s2/conf/mongod.conf --logappend
/data/mongodb/shard/s3/bin/mongod -f /data/mongodb/shard/s3/conf/mongod.conf --logappend

启动config
/data/mongodb/shard/config_server/bin/mongod -f /data/mongodb/shard/config_server/conf/mongod.conf --logappend

启动route  ** 注意 启动route是  mongos  而不是 mongod服务
mongos --port 27023 --configdb 192.168.61.97:27024 --fork --logpath=/data/mongodb/shard/s4/log/route.log --chunkSize 500

mongo客户端进入route服务器添加分片
db.runCommand({addshard:"192.168.61.97:27020"});
db.runCommand({addshard:"192.168.61.97:27021"});
db.runCommand({addshard:"192.168.61.97:27022"});

设置分片存储的数据库
db.runCommand({ enablesharding:"test" }) #设置分片存储的数据库

设置片键
db.runCommand({ shardcollection: "test.log", key: { id:1,time:1}})  // log 是集合名也就是表名  片键设置了两个 key 和  time

插入数据测试
for(var i=0;i<100000;i++){
    db.log.insert({id:i,time:i});
}
插入十万数据测试
这些数据会分别存储在三台shard上

printShardingStatus()  //**3.2版本的mongo 必须在config服务器上的admin下执行 才会正确返回

--- Sharding Status ---
  sharding version: {
	"_id" : 1,
	"minCompatibleVersion" : 5,
	"currentVersion" : 6,
	"clusterId" : ObjectId("578df6a9b69b78c8864d122b")
}
  shards:
	{  "_id" : "shard0000",  "host" : "192.168.61.97:27020" }
	{  "_id" : "shard0001",  "host" : "192.168.61.97:27021" }
	{  "_id" : "shard0002",  "host" : "192.168.61.97:27022" }
  balancer:
	Currently enabled:  yes
	Currently running:  no
	Failed balancer rounds in last 5 attempts:  0
	Migration Results for the last 24 hours:
		2 : Success
  databases:
	{  "_id" : "test",  "primary" : "shard0001",  "partitioned" : true }
		test.log
			shard key: { "id" : 1, "time" : 1 }
			chunks:
				shard0000	1
				shard0001	1
				shard0002	1
			{ "id" : MinKey, "time" : MinKey } -->> { "id" : 1, "time" : 1 } on : shard0002 Timestamp(3, 0)
			{ "id" : 1, "time" : 1 } -->> { "id" : 25, "time" : 25 } on : shard0001 Timestamp(3, 1)
			{ "id" : 25, "time" : 25 } -->> { "id" : MaxKey, "time" : MaxKey } on : shard0000 Timestamp(2, 0)

--- Sharding Status end---

DBQuery.shellBatchSize=50; // 设置shell客户端查询出来的总记录数

/** 分片 end**/

/** 备份与恢复 **/
mongodump -h dbhost -d dbname -o dbdirectory  //导出数据

mongodump --host HOST_NAME --port PORT_NUMBER	该命令将备份所有MongoDB数据	mongodump --host w3cschool.cc --port 27017
mongodump --dbpath DB_PATH --out BACKUP_DIRECTORY		mongodump --dbpath /data/db/ --out /data/backup/
mongodump --collection COLLECTION --db DB_NAME	该命令将备份指定数据库的集合。	mongodump --collection mycol --db test



mongorestore -h dbhost -d dbname --directoryperdb dbdirectory  //数据恢复



/** 备份与恢复 end**/

/** 监控 **/

MongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。

mongostat是mongodb自带的状态检测工具，在命令行下使用。它会间隔固定时间获取mongodb的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用mongostat来查看mongo的状态。


/** 监控 end**/

/** 关系 **/

一对多 ： 一个用户多个地址
user表
{
   "_id":ObjectId("52ffc33cd85242f436000001"),
   "name": "Tom Hanks",
   "contact": "987654321",
   "dob": "01-01-1991"
}
addr表
{
   "_id":ObjectId("52ffc4a5d85242602e000000"),
   "building": "22 A, Indiana Apt",
   "pincode": 123456,
   "city": "Los Angeles",
   "state": "California"
}

嵌入式实现
{
   "_id":ObjectId("52ffc33cd85242f436000001"),
   "contact": "987654321",
   "dob": "01-01-1991",
   "name": "Tom Benzamin",
   "address": [
      {
         "building": "22 A, Indiana Apt",
         "pincode": 123456,
         "city": "Los Angeles",
         "state": "California"
      },
      {
         "building": "170 A, Acropolis Apt",
         "pincode": 456789,
         "city": "Chicago",
         "state": "Illinois"
      }]
}


以上数据保存在单一的文档中，可以比较容易的获取和维护数据。 你可以这样查询用户的地址：
db.users.findOne({"name":"Tom Benzamin"},{"address":1})
注意：以上查询中 db 和 users 表示数据库和集合。
这种数据结构的缺点是，如果用户和用户地址在不断增加，数据量不断变大，会影响读写性能。

引用式
{
   "_id":ObjectId("52ffc33cd85242f436000001"),
   "contact": "987654321",
   "dob": "01-01-1991",
   "name": "Tom Benzamin",
   "address_ids": [
      ObjectId("52ffc4a5d85242602e000000"),
      ObjectId("52ffc4a5d85242602e000001")
   ]
}

我们可以读取这些用户地址的对象id（ObjectId）来获取用户的详细地址信息。
这种方法需要两次查询，第一次查询用户地址的对象id（ObjectId），第二次通过查询的id获取用户的详细地址信息。
var result = db.users.findOne({"name":"Tom Benzamin"},{"address_ids":1})
var addresses = db.address.find({"_id":{"$in":result["address_ids"]}})

/** 关系end **/

/** 引用 **/
考虑这样的一个场景，我们在不同的集合中 (address_home, address_office, address_mailing, 等)存储不同的地址（住址，办公室地址，邮件地址等）。
这样，我们在调用不同地址时，也需要指定集合，一个文档从多个集合引用文档，我们应该使用 DBRefs。

{ $ref : , $id : , $db :  }
$ref：集合名称
$id：引用的id
$db:数据库名称，可选参数

{
   "_id":ObjectId("53402597d852426020000002"),
   "address": {
   "$ref": "address_home",
   "$id": ObjectId("534009e4d852427820000002"),
   "$db": "w3cschoolcc"},
   "contact": "987654321",
   "dob": "01-01-1991",
   "name": "Tom Benzamin"
}

查询：
var user = db.users.findOne({"name":"Tom Benzamin"})
var dbRef = user.address
db[dbRef.$ref].findOne({"_id":(dbRef.$id)})

输出：
/* 1 */
{
    "_id" : ObjectId("52ffc4a5d85242602e000000"),
    "building" : "22 A, Indiana Apt",
    "pincode" : 123456,
    "city" : "Los Angeles",
    "state" : "California"
}


/** 引用end **/


/** 覆盖索引 **/
可用覆盖索引查询：
所有的查询字段是索引的一部分
所有的查询返回字段在同一个索引中

example:
{
   "_id": ObjectId("53402597d852426020000002"),
   "contact": "987654321",
   "dob": "01-01-1991",
   "gender": "M",
   "name": "Tom Benzamin",
   "user_name": "tombenzamin"
}

db.users.ensureIndex({gender:1,user_name:1})  //索引

db.users.find({gender:"M"},{user_name:1})     //查询

最后，如果是以下的查询，不能使用覆盖索引查询：
所有索引字段是一个数组
所有索引字段是一个子文档

/** 覆盖索引 e**/


/** 查询分析 **/

MongoDB 查询分析常用函数有：explain() 和 hint()
db.users.ensureIndex({gender:1,user_name:1})  // 索引
db.users.find({gender:"M"},{user_name:1,_id:0}).explain() //分析
*** 返回结果
{
   "cursor" : "BtreeCursor gender_1_user_name_1",
   "isMultiKey" : false,
   "n" : 1,
   "nscannedObjects" : 0,
   "nscanned" : 1,
   "nscannedObjectsAllPlans" : 0,
   "nscannedAllPlans" : 1,
   "scanAndOrder" : false,
   "indexOnly" : true,
   "nYields" : 0,
   "nChunkSkips" : 0,
   "millis" : 0,
   "indexBounds" : {
      "gender" : [
         [
            "M",
            "M"
         ]
      ],
      "user_name" : [
         [
            {
               "$minElement" : 1
            },
            {
               "$maxElement" : 1
            }
         ]
      ]
   }
}
***说明
indexOnly: 字段为 true ，表示我们使用了索引。
cursor：因为这个查询使用了索引，MongoDB中索引存储在B树结构中，所以这是也使用了BtreeCursor类型的游标。如果没有使用索引，游标的类型是BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。
n：当前查询返回的文档数量。
nscanned/nscannedObjects：表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。
millis：当前查询所需时间，毫秒数。
indexBounds：当前查询具体使用的索引。



虽然MongoDB查询优化器一般工作的很不错，但是也可以使用hints来强迫MongoDB使用一个指定的索引。
这种方法某些情形下会提升性能。 一个有索引的collection并且执行一个多字段的查询(一些字段已经索引了)。
如下查询实例指定了使用 gender 和 user_name 索引字段来查询：
db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1})
可以使用 explain() 函数来分析以上查询：
db.users.find({gender:"M"},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()

/** 查询分析 e**/

/** 原子操作 **/

mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。
但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。
所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。
集合：books
{
      _id: 123456789,
      title: "MongoDB: The Definitive Guide",
      author: [ "Kristina Chodorow", "Mike Dirolf" ],
      published_date: ISODate("2010-09-24"),
      pages: 216,
      language: "English",
      publisher_id: "oreilly",
      available: 3,
      checkout: [ { by: "joe", date: ISODate("2012-10-15") } ]
}

db.collection.findAndModify() 方法来判断书籍是否可结算并更新新的结算信息。
在同一个文档中嵌入的 available 和 checkout 字段来确保这些字段是同步更新的:
db.books.findAndModify ( {
   query: {
            _id: 123456789,
            available: { $gt: 0 }
          },
   update: {
             $inc: { available: -1 },   //递减
             $push: { checkout: { by: "abc", date: new Date() } }
           }
} )

***原子操作符

$set
用来指定一个键并更新键值，若键不存在并创建。
{ $set : { field : value } }
$unset
用来删除一个键。
{ $unset : { field : 1} }
$inc
$inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。
{ $inc : { field : value } }
$push
用法：
{ $push : { field : value } }
把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去。
$pushAll
同$push,只是一次可以追加多个值到一个数组字段内。
{ $pushAll : { field : value_array } }
$pull
从数组field内删除一个等于value值。
{ $pull : { field : _value } }
$addToSet
增加一个值到数组内，而且只有当这个值不在数组内才增加。
$pop
删除数组的第一个或最后一个元素
{ $pop : { field : 1 } }
$rename
修改字段名称
{ $rename : { old_field_name : new_field_name } }
$bit
位操作，integer类型
{$bit : { field : {and : 5}}}

/** 原子操作 e**/


/** 高级索引 **/

{
   "address": {
      "city": "Los Angeles",
      "state": "California",
      "pincode": "123"
   },
   "tags": [
      "music",
      "cricket",
      "blogs"
   ],
   "name": "Tom Benzamin"
}

集合包含一个子文档：address
和一个数组：tags

db.users.ensureIndex({"tags":1}) //数组建立索引
db.users.find({tags:"cricket"})  //查询
db.users.find({tags:"cricket"}).explain()  //分析   "cursor" : "BtreeCursor tags_1" ，则表示已经使用了索引。

db.users.ensureIndex({"address.city":1,"address.state":1,"address.pincode":1}) //建立子文档索引
db.users.find({"address.city":"Los Angeles"})  //查询
*** 注意 查询表达式必须遵循指定的索引的顺序
db.users.find({"address.city":"Los Angeles","address.state":"California"})  //查询



额外开销
每个索引占据一定的存储空间，在进行插入，更新和删除操作时也需要对索引进行操作。所以，如果你很少对集合进行读取操作，建议不使用索引。
内存(RAM)使用
由于索引是存储在内存(RAM)中,你应该确保该索引的大小不超过内存的限制。
如果索引的大小大于内存的限制，MongoDB会删除一些索引，这将导致性能下降。

索引不能被以下的查询使用：
正则表达式及非操作符，如 $nin, $not, 等。
算术运算符，如 $mod, 等。
$where 子句

索引键限制
从2.6版本开始，如果现有的索引字段的值超过索引键的限制，MongoDB中不会创建索引。
插入文档超过索引键限制
如果文档的索引字段值超过了索引键的限制，MongoDB不会将任何文档转换成索引的集合。与mongorestore和mongoimport工具类似。
最大范围
集合中索引不能超过64个
索引名的长度不能超过125个字符
一个复合索引最多可以有31个字段

/** 高级索引 e**/


/** ObjectId  **/
ObjectId 是一个12字节 BSON 类型数据，有以下格式：
前4个字节表示时间戳
接下来的3个字节是机器标识码
紧接的两个字节由进程id组成（PID）
最后三个字节是随机数。
MongoDB中存储的文档必须有一个"_id"键。这个键的值可以是任何类型的，默认是个ObjectId对象。
在一个集合里面，每个文档都有唯一的"_id"值，来确保集合里面每个文档都能被唯一标识。
MongoDB采用ObjectId，而不是其他比较常规的做法（比如自动增加的主键）的主要原因，因为在多个 服务器上同步自动增加主键值既费力还费时。

使用以下代码生成新的ObjectId：
newObjectId = ObjectId()

你也可以使用生成的id来取代MongoDB自动生成的ObjectId：
myObjectId = ObjectId("5349b4ddd2781d08c09890f4")

ObjectId("5349b4ddd2781d08c09890f4").getTimestamp()
以上代码将返回 ISO 格式的文档创建时间：
ISODate("2014-04-12T21:49:17Z")


在某些情况下，您可能需要将ObjectId转换为字符串格式。你可以使用下面的代码：
>new ObjectId().str
以上代码将返回Guid格式的字符串：：
5349b4ddd2781d08c09890f3

/** ObjectId e**/


/** Map-Reduce **/

Map-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。
MongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。

语法：

db.collection.mapReduce(
   function() {emit(key,value);},  //map 函数
   function(key,values) {return reduceFunction},   //reduce 函数
   {
      out: collection,
      query: document,
      sort: document,
      limit: number
   }
)

example :

文档

db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "mark",
   "status":"active"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "mark",
   "status":"active"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "mark",
   "status":"active"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "mark",
   "status":"active"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "mark",
   "status":"disabled"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "runoob",
   "status":"disabled"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "runoob",
   "status":"disabled"
});
db.posts.insert({
   "post_text": "菜鸟教程，最全的技术文档。",
   "user_name": "runoob",
   "status":"active"
});

查询:

db.posts.mapReduce(
   function() { emit(this.user_name,1); },
   function(key, values) {return Array.sum(values)},
      {
         query:{status:"active"},
         out:"post_total"
      }
)

输出：

{
        "result" : "post_total",
        "timeMillis" : 23,
        "counts" : {
                "input" : 5,
                "emit" : 5,
                "reduce" : 1,
                "output" : 2
        },
        "ok" : 1
}

说明：

结果表明，共有4个符合查询条件（status:"active"）的文档， 在map函数中生成了4个键值对文档，最后使用reduce函数将相同的键值分为两组。
具体参数说明：
result：储存结果的collection的名字,这是个临时集合，MapReduce的连接关闭后自动就被删除了。
timeMillis：执行花费的时间，毫秒为单位
input：满足条件被发送到map函数的文档个数
emit：在map函数中emit被调用的次数，也就是所有集合中的数据总量
ouput：结果集合中的文档个数（count对调试非常有帮助）
ok：是否成功，成功为1
err：如果失败，这里可以有失败原因，不过从经验上来看，原因比较模糊，作用不大

//查看结果
db.posts.mapReduce(
   function() { emit(this.user_name,1); },
   function(key, values) {return Array.sum(values)},
      {
         query:{status:"active"},
         out:"post_total"
      }
).find();

//输出

{ "_id" : "mark", "value" : 4 }
{ "_id" : "runoob", "value" : 1 }


/** Map-Reduce e**/

/** 全文索引 **/
MongoDB 在 2.6 版本以后是默认开启全文检索的，如果你使用之前的版本，你需要使用以下代码来启用全文检索:
db.adminCommand({setParameter:true,textSearchEnabled:true})

或者 服务中开启
mongod --setParameter textSearchEnabled=true

db.posts.ensureIndex({post_text:"text"})  //建立全文索引

db.posts.find({$text:{$search:"w3cschool.cc"}})  //查找 旧版的 db.posts.runCommand("text",{search:" w3cschool.cc"})


删除全文索引
删除已存在的全文索引，可以使用 find 命令查找索引名：
db.posts.getIndexes()
通过以上命令获取索引名，本例的索引名为post_text_text，执行以下命令来删除索引：
db.posts.dropIndex("post_text_text")

/** 全文索引d **/

/** 正则 **/

MongoDB 正则表达式
正则表达式是使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。
许多程序设计语言都支持利用正则表达式进行字符串操作。
MongoDB 使用 $regex 操作符来设置匹配字符串的正则表达式。
MongoDB使用PCRE (Perl Compatible Regular Expression) 作为正则表达式语言。
不同于全文检索，我们使用正则表达式不需要做任何配置。

//查询
db.posts.find({post_text:{$regex:"w3cschool"}});   //或者  db.posts.find({post_text:/w3cschool/});

db.posts.find({post_text:{$regex:"w3cschool.cc",$options:"$i"}})  //不区分大小写

数组元素使用正则表达式
我们还可以在数组字段中使用正则表达式来查找内容。 这在标签的实现上非常有用，如果你需要查找包含以 tutorial 开头的标签数据(tutorial 或 tutorials 或tutorialpoint 或 tutorialphp)， 你可以使用以下代码：
db.posts.find({tags:{$regex:"tutorial"}})


这里面使用正则表达式有两点需要注意：
正则表达式中使用变量。一定要使用eval将组合的字符串进行转换，不能直接将字符串拼接后传入给表达式。否则没有报错信息，只是结果为空！实例如下：
var name=eval("/" + 变量值key +"/i");
以下是模糊查询包含title关键词, 且不区分大小写:
title:eval("/"+title+"/i")    // 等同于 title:{$regex:title,$Option:"$i"}

/** 正则 e**/

/** GridFS **/

GridFS 添加文件:
mongofiles -d gridfs put song.mp3


gridfs 是存储文件的数据名称。如果不存在该数据库，MongoDB会自动创建。Song.mp3 是音频文件名。
使用以下命令来查看数据库中文件的文档：
db.fs.files.find()
以上命令执行后返回以下文档数据：
{
   _id: ObjectId('534a811bf8b4aa4d33fdf94d'),
   filename: "song.mp3",
   chunkSize: 261120,
   uploadDate: new Date(1397391643474), md5: "e4f53379c909f7bed2e9d631e15c1c41",
   length: 10401959
}
我们可以看到 fs.chunks 集合中所有的区块，以下我们得到了文件的 _id 值，我们可以根据这个 _id 获取区块(chunk)的数据：
db.fs.chunks.find({files_id:ObjectId('534a811bf8b4aa4d33fdf94d')})
以上实例中，查询返回了 40 个文档的数据，意味着mp3文件被存储在40个区块中。

/** GridFS e**/


/** 固定集合 **/

MongoDB 固定集合（Capped Collections）
MongoDB 固定集合（Capped Collections）是性能出色且有着固定大小的集合，对于大小固定，我们可以想象其就像一个环形队列，当集合空间用完后，再插入的元素就会覆盖最初始的头部的元素！

db.createCollection("cappedLogCollection",{capped:true,size:10000,max:1000})  //创建  max是指定文档个数的属性

db.cappedLogCollection.isCapped()  //判断是否是固定集合

db.runCommand({"convertToCapped":"posts",size:10000})  //将已经存在的posts转换为固定集合

db.cappedLogCollection.find().sort({$natural:-1})  //查询   固定集合文档按照插入顺序储存的,默认情况下查询就是按照插入顺序返回的,也可以使用$natural调整返回顺序。

特点
可以插入及更新,但更新不能超出collection的大小,否则更新失败,不允许删除,但是可以调用drop()删除集合中的所有行,但是drop后需要显式地重建集合。
在32位机子上一个cappped collection的最大值约为482.5M,64位上只受系统文件大小的限制。

/** 固定集合 e**/

/**  实现自增  **/
db.createCollection("counters");  //新建保存自增值的集合
db.counters.insert({_id:"productid",sequence_value:0})  // 插入文档到自增值集合

function getNextSequenceValue(sequenceName){
   var sequenceDocument = db.counters.findAndModify(
      {
         query:{_id: sequenceName },
         update: {$inc:{sequence_value:1}},
         new:true
      });
   return sequenceDocument.sequence_value;
}   // 自定义函数sequenceName()利用findAndModify来实现自增值集合中的sequence_value值自增

// TEST
db.products.insert({
   "_id":getNextSequenceValue("productid"),
   "product_name":"Apple iPhone",
   "category":"mobiles"});


db.products.insert({
   "_id":getNextSequenceValue("productid"),
   "product_name":"Samsung S3",
   "category":"mobiles"})

 说明：products集合的_id字段调用  sequenceName() 来实现自增

/**  实现自增e **/

/** mongodb权限 **/

***创建超级管理员

use admin
db.createUser(
  {
    user: "zhsAdmin",
    pwd: "zhs123",
    roles:
    [
      {
        role: "userAdminAnyDatabase",
        db: "admin"
      }
    ]
  }
)

 mongo --host 192.168.61.97 --port 27023  -u zhsAdmin -p zhs123 --authenticationDatabase admin  //登陆


 db.createUser(
  {
    user: "testAdmin",
    pwd: "zhs123",
    roles: [
       { role: "readWrite", db: "config" }
    ]
  }
 )

db.createUser({user: "testOwner",pwd: "zhs123",roles: [ { role: "dbOwner", db: "test" }]});

db.changeUserPassword("reporting", "SOh3TbYhxuLiW8ypJPxmt1oOfL")  //修改密码

use products  //选择数据库
db.grantRolesToUser(  //授权
   "zhsAdmin",   //用户名
   [ "readWrite" , { role: "read", db: "config" } ],  //角色
   { w: "majority" , wtimeout: 4000 }  //可选项
)


/** mongodb权限 e**/

runuser -s /bin/bash mongod -c '/usr/bin/mongos --configdb 192.168.61.97:27024 --port 27023 --logpath=/data/mongodb/shard/s4/log/route.log --keyFile /data/mongodb/shard/s4/key.d/mongod.key --fork ' &



